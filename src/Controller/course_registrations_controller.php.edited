<?php
class CourseRegistrationsController extends AppController {

	  var $name = 'CourseRegistrations';
      var $menuOptions = array(
              
                'exclude'=>array('index', 'get_course_registered_grade_list', 'get_course_registered_grade_result','search'),
                
            );
    var $components =array('AcademicYear');
    function beforeFilter () {
	      parent::beforeFilter();
	      $this->Auth->Allow('show_course_registred_students', 'get_course_registered_grade_list', 'get_course_registered_grade_result','search');
		
	}
    function beforeRender() {

        $acyear_array_data = $this->AcademicYear->acyear_array();
        //To diplay current academic year as default in drop down list
        $defaultacademicyear=$this->AcademicYear->current_academicyear();
       
        $this->set(compact('acyear_array_data','defaultacademicyear'));
       
	}
	 /*
	 *Generic search for returned items
	 */
	 function search() {
		// the page we will redirect to
		$url['action'] = 'index';
		
		// build a URL will all the search elements in it
		// the resulting URL will be 
		// domain.com/returned_items/index/Search.keywords:mykeyword/Search.tag_id:3
		foreach ($this->data as $k=>$v){ 
			foreach ($v as $kk=>$vv){ 
				$url[$k.'.'.$kk]=$vv; 
			} 
		}

		// redirect the user to the url
		$this->redirect($url, null, true);
	 }
	 function index() {
	       // $this->CourseRegistration->recursive = 2;
	     $this->paginate = array('contain'=>array('Student'=>array('Department'=>array('id','name'),'Program'=>array('id','name'),'ProgramType'=>array('id','name')),'YearLevel','CourseDrop','PublishedCourse'=>array('Course')));
	    $this->paginate['reset']=false;
	      // filter by academic year  
	     if (isset($this->passedArgs['Search.academic_year'])) { 
	            
	            $academic_year=$this->passedArgs['Search.academic_year'];
	            if ($this->role_id == ROLE_STUDENT) {
                    $this->paginate['conditions'][]['CourseRegistration.academic_year LIKE'] = $academic_year.'%';
                    $this->paginate['conditions'][]['CourseRegistration.student_id'] = $this->student_id ;
                        
                } else if ($this->role_id == ROLE_REGISTRAR) {
                    $this->paginate['conditions'][]['CourseRegistration.academic_year LIKE'] = $academic_year.'%';
                    $this->paginate['conditions'][]['Student.department_id'] = $this->department_ids ;
                   
                } else if ($this->role_id == ROLE_DEPARTMENT) {
                
                    $this->paginate['conditions'][]['CourseRegistration.academic_year LIKE'] = $academic_year.'%';
                    $this->paginate['conditions'][]['Student.department_id'] = $this->department_id ;
                   
                
                } else if ($this->role_id == ROLE_COLLEGE) {
                   $this->paginate['conditions'][]['CourseRegistration.academic_year LIKE'] = $academic_year.'%';
                    $this->paginate['conditions'][]['Student.college_id'] = $this->college_id ;
                   
                }
                
			

			// set the Search data, so the form remembers the option
			$this->data['Search']['academic_year'] = $this->passedArgs['Search.academic_year'];
	     }
	     
	     // filter by semester 
	     if (isset($this->passedArgs['Search.semester'])) { 
	            $semester=$this->passedArgs['Search.semester'];
	            if ($this->role_id == ROLE_STUDENT) {
                    $this->paginate['conditions'][]['CourseRegistration.semester LIKE'] = $semester;
                    $this->paginate['conditions'][]['CourseRegistration.student_id'] = $this->student_id ;
                        
                } else if ($this->role_id == ROLE_REGISTRAR) {
                    $this->paginate['conditions'][]['CourseRegistration.semester LIKE'] = $semester;
                    $this->paginate['conditions'][]['Student.department_id'] = $this->department_ids ;
                   
                } else if ($this->role_id == ROLE_DEPARTMENT) {
                
                    $this->paginate['conditions'][]['CourseRegistration.semester LIKE'] = $semester;
                    $this->paginate['conditions'][]['Student.department_id'] = $this->department_id ;
                   
                
                } else if ($this->role_id == ROLE_COLLEGE) {
                   $this->paginate['conditions'][]['CourseRegistration.semester LIKE'] = $semester;
                    $this->paginate['conditions'][]['Student.college_id'] = $this->college_id ;
                   
                }
                
			

			// set the Search data, so the form remembers the option
			$this->data['Search']['semester'] = $this->passedArgs['Search.semester'];
	     }
	     // filter by program 
	     if (isset($this->passedArgs['Search.program_id'])) { 
	            $program_id=$this->passedArgs['Search.program_id'];
	            if ($this->role_id == ROLE_REGISTRAR) {
                    $this->paginate['conditions'][]['Student.program_id'] = $program_id;
                    $this->paginate['conditions'][]['Student.department_id'] = $this->department_ids ;
                   
                } else if ($this->role_id == ROLE_DEPARTMENT) {
                
                    $this->paginate['conditions'][]['Student.department_id'] = $this->department_id ;
                   
                     $this->paginate['conditions'][]['Student.program_id'] = $program_id;
                   
                } else if ($this->role_id == ROLE_COLLEGE) {
                     $this->paginate['conditions'][]['Student.program_id'] = $program_id;
                    $this->paginate['conditions'][]['Student.college_id'] = $this->college_id ;
                   
                }
                
			

			// set the Search data, so the form remembers the option
			$this->data['Search']['program_id'] = $this->passedArgs['Search.program_id'];
	     }
	     
	      // filter by program 
	     if (isset($this->passedArgs['Search.program_type_id'])) { 
	            $program_type_id=$this->passedArgs['Search.program_type_id'];
	            if ($this->role_id == ROLE_REGISTRAR) {
                    $this->paginate['conditions'][]['Student.program_id'] =$program_type_id;
                    $this->paginate['conditions'][]['Student.department_id'] = $this->department_ids ;
                   
                } else if ($this->role_id == ROLE_DEPARTMENT) {
                
                    $this->paginate['conditions'][]['Student.department_id'] = $this->department_id ;
                   
                     $this->paginate['conditions'][]['Student.program_type_id'] = $program_type_id;
                   
                } else if ($this->role_id == ROLE_COLLEGE) {
                     $this->paginate['conditions'][]['Student.program_type_id'] = $program_type_id;
                    $this->paginate['conditions'][]['Student.college_id'] = $this->college_id ;
                   
                }
                
			

			// set the Search data, so the form remembers the option
			$this->data['Search']['program_type_id'] = $this->passedArgs['Search.program_type_id'];
	     }
	     	// filter by registration date  
	     if(isset($this->passedArgs['Search.registration_date'])) {
		   
			$field = '';
			$date = explode(' ',$this->passedArgs['Search.registration_date']);
			
			if (isset($date[1]) && in_array($date[0],array('<','>','<=','>='))) { 
				$field = ' '.array_shift($date);
			}
			
			$date = implode(' ',$date);
			
			$date = date('Y-m-d',strtotime($date));  
			if ($this->role_id == ROLE_STUDENT) {
                    $this->paginate['conditions'][]['CourseRegistration.created ' .$field] = $date;
                    $this->paginate['conditions'][]['CourseRegistration.student_id'] = 
                    $this->student_id;
                        
            } else if ($this->role_id == ROLE_REGISTRAR) {
                   $this->paginate['conditions'][]['CourseRegistration.created '.$field] = $date;
                    $this->paginate['conditions'][]['Student.department_id'] = $this->department_ids ;
                   
            } else if ($this->role_id == ROLE_DEPARTMENT) {
                
                   $this->paginate['conditions'][]['CourseRegistration.created '.$field] = $date;
                    $this->paginate['conditions'][]['Student.department_id'] = $this->department_id ;
                   
                
            } else if ($this->role_id == ROLE_COLLEGE) {
                  $this->paginate['conditions'][]['CourseRegistration.created '.$field] = $date;
                  $this->paginate['conditions'][]['Student.college_id'] = $this->college_id ;
                   
             }
			 $this->data['Search']['registration_date'] = $this->passedArgs['Search.registration_date'];
			
		}
		
		// filter by department
		if (isset($this->passedArgs['Search.department_id'])) {
                $department_id = array($this->passedArgs['Search.department_id']);
		
                if ($this->role_id == ROLE_REGISTRAR) {
                     
                     $this->paginate['conditions'][]['Student.department_id'] = $department_id;
                    // $this->paginate['conditions'][]['Student.department_id'] = $this->department_ids ;
                   
                } else if ($this->role_id == ROLE_COLLEGE) {
                    $this->paginate['conditions'][]['Student.department_id '] = $department_id;
                    $this->paginate['conditions'][]['Student.college_id'] = $this->college_id ;
                   
                }
                
			
      
			// set the Search data, so the form remembers the option
			$this->data['Search']['department_id'] = $this->passedArgs['Search.department_id'];

		}
		
		
	    if (!isset($this->paginate['conditions'])) {
	             if ($this->role_id == ROLE_STUDENT) {
                     $conditions = array(
                           
                             'CourseRegistration.student_id'=>$this->student_id
                            );
                        
                } else if ($this->role_id == ROLE_REGISTRAR) {
                    $conditions = array(
                             "CourseRegistration.created <="=> date("Y-m-d 23:59:59"),
                             "CourseRegistration.created >= "=> date("Y-m-d 00:00:01",strtotime("-60 day")),
                             'Student.department_id'=>$this->department_ids
                            );
                 
                } else if ($this->role_id == ROLE_DEPARTMENT) {
                    $conditions = array(
                             "CourseRegistration.created <="=> date("Y-m-d 23:59:59"),
                             "CourseRegistration.created >= "=> date("Y-m-d 00:00:01",strtotime("-60 day")),
                             'Student.department_id'=>$this->department_id
                            );
                
                } else if ($this->role_id == ROLE_COLLEGE) {
                      $conditions = array(
                             "CourseRegistration.created <="=> date("Y-m-d 23:59:59"),
                             "CourseRegistration.created >= "=> date("Y-m-d 00:00:01",strtotime("-60 day")),
                             'Student.college_id'=>$this->college_id
                            );
                
                }
                
		  
		    $courseRegistrations=$this->Paginate($conditions);
		    
		    $from=date("Y-m-d",strtotime("-60 day"));
		    $to=date("Y-m-d");
		    $this->set(compact('from','to'));
		    
		} else {
		   // debug($this->paginate['conditions']);
            $courseRegistrations = $this->paginate();
            
	    }
	   // if (empty($senateLists) && isset($this->passedArgs) && !empty($this->passedArgs)) {
	    
	   if (empty($courseRegistrations) && isset($this->passedArgs) && !empty($this->passedArgs)) {
	      $this->Session->setFlash('<span></span>'.__('No result is found for the given search criteria.', true),'default',array('class'=>'info-box info-message'));
	    }
	    
	    if ($this->role_id == ROLE_REGISTRAR) {
	       
	       $departments=$this->CourseRegistration->Student->Department->find('list',
	       array('conditions'=>array('Department.id'=>$this->department_ids))); 
	    } else if ($this->role_id == ROLE_COLLEGE) {
	       $departments=$this->CourseRegistration->Student->Department->find('list',
	       array('conditions'=>array('Department.college_id'=>$this->college_id)));
	    }
	    $programs = $this->CourseRegistration->Student->Program->find('list');
	    $programTypes =  $this->CourseRegistration->Student->ProgramType->find('list');
	    $this->set(compact('courseRegistrations','departments','programs','programTypes'));	
	}

	function view($id = null) {
		if (!$id) {
			$this->Session->setFlash('<span></span>'.__('Invalid course registration', true),
			'default',array('class'=>'error-box error-message'));
			$this->redirect(array('action' => 'index'));
		}
		$this->set('courseRegistration', $this->CourseRegistration->read(null, $id));
	}

	function add() {
		if (!empty($this->data)) {
			$this->CourseRegistration->create();
			if ($this->CourseRegistration->save($this->data)) {
				$this->Session->setFlash(__('The course registration has been saved', true));
				$this->redirect(array('action' => 'index'));
			} else {
				$this->Session->setFlash(__('The course registration could not be saved. Please, try again.', true));
			}
		}
		$yearLevels = $this->CourseRegistration->YearLevel->find('list');
		$students = $this->CourseRegistration->Student->find('list');
		$courses = $this->CourseRegistration->Course->find('list');
		$this->set(compact('yearLevels', 'students', 'courses'));
	}

	function edit($id = null) {
		if (!$id && empty($this->data)) {
			$this->Session->setFlash(__('Invalid course registration', true));
			$this->redirect(array('action' => 'index'));
		}
		if (!empty($this->data)) {
			if ($this->CourseRegistration->save($this->data)) {
				$this->Session->setFlash(__('The course registration has been saved', true));
				$this->redirect(array('action' => 'index'));
			} else {
				$this->Session->setFlash(__('The course registration could not be saved. Please, try again.', true));
			}
		}
		if (empty($this->data)) {
			$this->data = $this->CourseRegistration->read(null, $id);
		}
		$yearLevels = $this->CourseRegistration->YearLevel->find('list');
		
		$academicCalendars = $this->CourseRegistration->AcademicCalendar->find('list');
		$students = $this->CourseRegistration->Student->find('list');
		$courses = $this->CourseRegistration->Course->find('list');
		$this->set(compact('yearLevels', 'students', 'courses','academicCalendars'));
	}

	function delete($id = null) {
		if (!$id) {
			$this->Session->setFlash(__('Invalid id for course registration', true));
			$this->redirect(array('action'=>'index'));
		}
		if ($this->CourseRegistration->delete($id)) {
			$this->Session->setFlash(__('Course registration deleted', true));
			$this->redirect(array('action'=>'index'));
		}
		$this->Session->setFlash(__('Course registration was not deleted', true));
		$this->redirect(array('action' => 'index'));
	}
	/**
	* Function to allow students to register for the published coures
	*/
	function register() {
	 
	    //check students are allowed to register based on their academic status.
	    $getRegistrationDeadLine=false;
	    $get_student_acadamic_status=null;
	    $latestSemester=null;
	    $latest_academic_year = $this->AcademicYear->current_academicyear();
	    $passed_or_failed=$this->CourseRegistration->Student->StudentExamStatus->
	    get_student_exam_status($this->student_id,$latest_academic_year);
	       
	   $latestAcSemester= $this->CourseRegistration->getLastestStudentSemesterAndAcademicYear(
	   $this->student_id,$latest_academic_year);
	   $latestSemester=$latestAcSemester['semester'];
	       
	   /////////////////////////////////////////////////////////////////////////// 
	    
	   if ($passed_or_failed) {
	        
	        $get_student_acadamic_status=$this->CourseRegistration->Student
	        ->StudentExamStatus->getStudentAcadamicStatus($this->student_id,
	        $latest_academic_year,$latestSemester);
	       
	       $student_section= $this->CourseRegistration->Student->student_academic_detail(
	       $this->student_id,$latest_academic_year);
	       
	        if (!empty($this->department_id)) {
             $year_level_id = $this->CourseRegistration->YearLevel->field('name',
             array('id'=> $student_section['Section'][0]['year_level_id']));
             
	        $getRegistrationDeadLine=$this->CourseRegistration->AcademicCalendar->check_registration ($latest_academic_year,$latestSemester,$this->department_id,$year_level_id);
	        } else if (!empty($this->college_id)) {
	          $getRegistrationDeadLine=true;
	        }
	      
	        if (!$getRegistrationDeadLine) {
	            $this->Session->setFlash('<span></span>'.__('Course registration deadline passed. You can not registered, please advice your department', true),'default',array('class'=>'warning-box warning-message'));
	            
	            $deadlinepassed=true;
	            $this->set(compact('deadlinepassed'));
			       
	        }
	        
	        
	        if (!empty($this->data)) {
	            
	            //check students has already registered  
	             $not_registered=$this->CourseRegistration->alreadyRegistred($this->data['CourseRegistration'][1]['semester'],$latest_academic_year,$this->data['CourseRegistration'][1]['student_id']);
	            if ($not_registered==0) {
	                //Save course registration.
	                if (!empty($this->data['CourseRegistration'])) {
	                    if ($this->CourseRegistration->saveAll($this->data['CourseRegistration'],
	                    array('validate'=>false))) {
	                        /*$this->CourseRegistration->Student->Course->CoursesStudent->
	                        saveAll($save_in_join_table['CoursesStudent'],array('validate'=>false));
	                         */
	                         $this->Session->setFlash('<span></span>'.__('
	                         You have successfully registered for semester '.$latestSemester.'/'.$latest_academic_year, true),'default',array('class'=>'success-box success-message'));
	                        $this->redirect(array('action' => 'index'));
	                    }
	                   
	                }
	            } else {
	               $this->Session->setFlash('<span></span>'.__('You have already registered for
	               semester '.$latestSemester.'/'.$latest_academic_year.'.', true),'default',array('class'=>'error-box error-message'));
	               
	            
	            }
	        }
	      
	       
	        
	        if (!empty($student_section)) {
	            
	            if (count($student_section['Section'])>0) {
	             
	                if (empty($student_section['Student']['department_id'])) {
	                    $published_courses=$this->CourseRegistration->PublishedCourse->find('all',
	            array('conditions'=>array(
	            'PublishedCourse.department_id is null',
	            'PublishedCourse.section_id'=>$student_section['Section'][0]['id'],
	            'PublishedCourse.year_level_id'=>0,'PublishedCourse.add'=>0
	            ,'PublishedCourse.academic_year LIKE'=>$latest_academic_year.'%',
	            'PublishedCourse.semester'=>$latestSemester,
	            'PublishedCourse.college_id'=>$student_section['Student']['college_id'],
	            ),'contain'=>array('Course'=>array(
	            'Prerequisite'=>array('id','prerequisite_course_id','co_requisite'),'fields'=>array('Course.id','Course.course_code','Course.course_title','Course.lecture_hours',
	            'Course.tutorial_hours','Course.credit')))));
	                
	               } else {
	                $published_courses=$this->CourseRegistration->PublishedCourse->find('all',
	            array('conditions'=>array('PublishedCourse.department_id'=>$this->department_id,
	            'PublishedCourse.section_id'=>$student_section['Section'][0]['id'],'PublishedCourse.year_level_id'=>$student_section['Section'][0]['year_level_id'],'PublishedCourse.add'=>0
	            ,'PublishedCourse.academic_year LIKE'=>$latest_academic_year.'%',
	            'PublishedCourse.semester'=>$latestSemester),'contain'=>array('Course'=>array(
	            'Prerequisite'=>array('id','prerequisite_course_id','co_requisite'),'fields'=>array('Course.id','Course.course_code','Course.course_title','Course.lecture_hours',
	            'Course.tutorial_hours','Course.credit')))));
	              
	              }
	              
	              $published_courses= $this->CourseRegistration->
	             getRegistrationType($published_courses,$this->student_id,$get_student_acadamic_status);
	            
	              //get_student_section ($student_id=null,$academic_year=null) 
	       
	               $previous_status_semester=$this->CourseRegistration->Student->StudentExamStatus->
	       getPreviousSemester($latest_academic_year,$latestSemester);
	       
			       $latest_status_year_semester = $this->CourseRegistration->Student->StudentExamStatus->studentYearAndSemesterLevelOfStatusDisplay($this->student_id, $latest_academic_year,$previous_status_semester['semester']);  
			       
	                $student_section_exam_status=$this->CourseRegistration->Student->
	                get_student_section($this->student_id,$latest_academic_year,$latest_status_year_semester['semester']);
	               /*
	                $student_section_exam_status=$this->CourseRegistration->Student->
	                get_student_section($this->student_id,$latest_academic_year);
<<<<<<< .mine
	               
=======
	                */
>>>>>>> .r353
	                $this->set(compact('published_courses','student_section','student_section_exam_status'));
	                
	            }
	              
	        }
	    } else {
			  $this->Session->setFlash('<span></span>'.__('Your academic status is dismissed you can not register for semester '.$latestSemester.'/'.$latest_academic_year.'.', true),'default',array('class'=>'info-box info-message'));
			     
			 $this->redirect(array('action'=>'index'));   
	        	  
	    }
	    
	    if (empty($published_courses)) {
	      
            $this->Session->setFlash('<span></span>'.__('There is no published courses that required registration.', true),'default',array('class'=>'info-box info-message'));
           
	       
	                $this->redirect(array('action' => 'index'));
			      
	        	  
	    }
	    
	  }
	  /**
	  * Private function that get list of students not registred for latest 
	  * academic year and semester.
	  */
	  function _student_list_not_registred ($data=null) {
	  	     $options = array();
	         $options['fields']=array('PublishedCourse.id');
	         $search_conditions = array();
	         $organized_students=array(); 
	         $latest_semester_academic_year=$this->CourseRegistration->latest_academic_year_semester();
	         
             if(!empty($latest_semester_academic_year)) {
                   
                    $options['conditions'][] = array(
                            'PublishedCourse.academic_year like '=>$latest_semester_academic_year['academic_year'].'%',
                            'PublishedCourse.add'=>0);
                   if (!empty($data['Student']['department_id'])) {
                        $options['conditions'][] = array(
                            'PublishedCourse.department_id'=>$data['Student']['department_id']);
                     
                   }/* else {
                   
                             $options['conditions'][] = array(
                            'PublishedCourse.department_id'=>$this->department_id);
                   
                   } 
                   */
                   
                   if (empty($data['Student']['department_id']) || empty($data['Student']['college_id']) ) {
                            if (!empty($this->department_ids)) {
                               
                             $options['conditions'][] = array(
                            'PublishedCourse.department_id'=>$this->department_ids);
                   
                            } else if (!empty($this->college_ids)) {
                               
                             $options['conditions'][] = array(
                            'PublishedCourse.college_id'=>$this->college_ids);
                          //  debug($this->college_ids);
                            
                            }
                   }
                   
                   if (!empty($data['Student']['program_id'])) {
                       $options['conditions'][] = array(
                            'PublishedCourse.program_id'=>$data['Student']['program_id']);
                   }
                   
                   if (!empty($data['Student']['program_type_id'])) {
                       $options['conditions'][] = array(
                            'PublishedCourse.program_type_id'=>$data['Student']['program_type_id']);
                   }
                   
                   if (!empty($data['Student']['semester'])) {
                       $options['conditions'][] = array(
                            'PublishedCourse.semester'=>$data['Student']['semester']);
                   } /*else {
                            $options['conditions'][] = array(
                            'PublishedCourse.semester'=>$latest_semester_academic_year['semester']);
                   
                   }
                   */
                   
                   /* 
             	   if (!empty($data['Student']['department_id'])) {
                    
                   $published_course_ids=$this->CourseRegistration->PublishedCourse->find('list',
                 array('conditions'=>array('PublishedCourse.department_id'=>$data['Student']['department_id'],
                 'PublishedCourse.semester'=>$latest_semester_academic_year['semester'],
                 'PublishedCourse.academic_year like '=>$latest_semester_academic_year['academic_year'].'%','PublishedCourse.add'=>0),
                 'fields'=>array('PublishedCourse.id')));
                       
                   } else { 
                   
                       $published_course_ids=$this->CourseRegistration->PublishedCourse->find('list',
                 array('conditions'=>array('PublishedCourse.department_id'=>$this->department_ids,
                 'PublishedCourse.semester'=>$latest_semester_academic_year['semester'],
                 'PublishedCourse.academic_year like '=>$latest_semester_academic_year['academic_year'].'%','PublishedCourse.add'=>0),
                 'fields'=>array('PublishedCourse.id')));
                          
                   }
                   */
                   $published_course_ids=$this->CourseRegistration->PublishedCourse->find('list',$options);   
                  if (empty($published_course_ids)) {
                         return array();
                   }
                   
                   $options=array();              
             } else {
                /*
                $published_course_ids=$this->CourseRegistration->PublishedCourse->find('list',
                 array('conditions'=>array('PublishedCourse.department_id'=>$this->department_ids,'PublishedCourse.add'=>0),'fields'=>array('PublishedCourse.id')));
               */
             
             }
             //debug($data);
             if(!empty($data)) {
             
                    $search_conditions['conditions'][]=array('Student.id NOT IN (select student_id from graduate_lists)');
                    $search_conditions['fields']=array('Student.id',
				'Student.studentnumber','Student.full_name');
				    $search_conditions['order']=array('Student.full_name');
				    $search_conditions['contain']=array('Section'=>array('id','year_level_id'),'StudentsSection.archive = 0','Program'=>array('fields'=>array('id','name')),
				'ProgramType'=>array('fields'=>array('id','name')),
				'Department'=>array('fields'=>array('id','name')));
				     
                   if (!empty($data['Student']['program_id'])) {
                       $search_conditions['conditions'][] = array(
                            'Student.program_id'=>$data['Student']['program_id']);
                                    }
                   
                   if (!empty($data['Student']['program_type_id'])) {
                          $search_conditions['conditions'][] = array(
                            'Student.program_type_id'=>$data['Student']['program_type_id']);
    
                   }
                   
                   if (!empty($data['Student']['department_id'])) {
                        $department_ids = $this->_givenPublisheCourseReturnDept($published_course_ids);
                        if (in_array($data['Student']['department_id'],$department_ids['dept'])) {
                             $search_conditions['conditions'][] = array(
                            'Student.department_id'=>$data['Student']['department_id']);
                        } 
   
                   } 
                   
                   if (!empty($data['Student']['college_id'])) {
                      $search_conditions['conditions'][] = array(
                            'Student.college_id'=>$data['Student']['college_id']);
                       $search_conditions['conditions'][] = array(
                            'Student.department_id is null');
                   }
                   
                   if (!empty($data['Student']['studentnumber'])) {
                      $search_conditions['conditions'][] = array(
                            'Student.studentnumber like '=> trim ($data['Student']['studentnumber']));
                     
                   }
                   
                   if (!empty($this->department_ids) && empty($data['Student']['department_id'])) {
                     $search_conditions['conditions'][] = array(
                            'Student.department_id'=>$this->department_ids);
   
                   } else if (!empty($this->college_ids) && empty($data['Student']['college_id'])) {
                            $college_ids = $this->_givenPublisheCourseReturnDept($published_course_ids);
                  
                             $search_conditions['conditions'][] = array(
                            'Student.college_id'=>$college_ids['college'],
                            'Student.department_id is null'); 
           
                   }
                   
                   /*
                    if (!empty($this->department_ids)) {
                      $department_ids = $this->_givenPublisheCourseReturnDept($published_course_ids);
                     
                      $search_conditions['conditions'][] = array(
                            'Student.department_id'=>$department_ids['dept']);
   
                   } else if (!empty($this->college_ids)) {
                        $college_ids = $this->_givenPublisheCourseReturnDept($published_course_ids);
                      
                         $search_conditions['conditions'][] = array(
                            'Student.department_id is null'); 
                             $search_conditions['conditions'][] = array(
                            'Student.college_id'=>$college_ids['college']); 
           
                   }
                   */
                    /*
                    if(!empty($data['Student']['program_id'])&&!empty($data['Student']['program_type_id']) && !empty($data['Student']['year_level_id'])){
                    
                         $conditions['Student.program_id']=$data['Student']['program_id'];
                         $conditions['Student.program_type_id']=$data['Student']['program_type_id'];
                         //$conditions['Section.year_level_id']=$data['Student']['year_level_id']; 
                        //  $year_level_id=$data['Student']['year_level_id'];
                    } else if(!empty($data['Student']['program_id']) && !empty($data['Student']['year_level_id'])){
                       $conditions['Student.program_id']=$data['Student']['program_id'];
                       
                    } else if (!empty($data['Student']['program_type_id']) && !empty($data['Student']['year_level_id'])) {
                       $conditions['Student.program_id']=$data['Student']['program_type_id'];
                      // $year_level_id=$data['Student']['year_level_id'];
                    } else if (!empty($data['Student']['studentnumber'])){
                       
                      
                      $department_ids = $this->_givenPublisheCourseReturnDept($published_course_ids);
                      $conditions['Student.studentnumber like ']=trim(
                      $data['Student']['studentnumber']).'%';
                      $conditions['Student.department_id'] = $department_ids;
                       
                    } else if (!empty($data['Student']['department_id'])) {
                        $department_ids = $this->_givenPublisheCourseReturnDept($published_course_ids);
                        if (in_array($data['Student']['department_id'],$department_ids)) {
                               $conditions['Student.department_id']=trim($data['Student']['department_id']);
                        } else {
                           $conditions['Student.department_id']=array();
                        }
                    
                    } else {
                        
                        $department_ids = $this->_givenPublisheCourseReturnDept($published_course_ids);
                        $conditions['Student.department_id']=$department_ids;
                      
                    }
                  */  
                    
             } else {
                        /*
                        $department_ids = array ();
                        foreach ($published_course_ids as $id=>$idvalue) {
                                $department_ids[] =$this->CourseRegistration->PublishedCourse->field('department_id',array('PublishedCourse.id'=>$idvalue)); 
                          
                       }
                       */
                     
                   if (!empty($this->department_ids)) {
                      $department_ids = $this->_givenPublisheCourseReturnDept($published_course_ids);
                     
                      $search_conditions['conditions'][] = array(
                            'Student.department_id'=>$department_ids['dept']);
   
                   } else if (!empty($this->college_ids)) {
                        $college_ids = $this->_givenPublisheCourseReturnDept($published_course_ids);
                      
                         $search_conditions['conditions'][] = array(
                            'Student.department_id is null'); 
                             $search_conditions['conditions'][] = array(
                            'Student.college_id'=>$college_ids['college']); 
           
                   }
                       /*
                       $department_ids = $this->_givenPublisheCourseReturnDept($published_course_ids);
             
                       $conditions['Student.department_id']=$department_ids;
                      */
                      //$conditions['Student.department_id']=$this->department_ids;
             }
             
             $this->CourseRegistration->Student->bindModel(
				array(
					'hasMany' => array(
						'StudentsSection' => array(
							'className' => 'StudentsSection'
						)
					)
				)
			);
			
			/*
             $students=$this->CourseRegistration->Student->find('all',
             array('conditions'=>array($conditions,
             'Student.id NOT IN (select student_id from graduate_lists)'),
             'fields'=>array('Student.id',
				'Student.studentnumber','Student.full_name'),
				
				'order'=>'Student.full_name',
				'contain'=>array('Section'=>array('id','year_level_id'),'StudentsSection.archive = 0','Program'=>array('fields'=>array('id','name')),
				'ProgramType'=>array('fields'=>array('id','name')),
				'Department'=>array('fields'=>array('id','name')))));
			  
			  */
			  $students=$this->CourseRegistration->Student->find('all',$search_conditions);
			  //debug($students);
			  if(!empty($students)){
			      $students_list_not_registred=array();
			     // student by student 
			      foreach ($students as $id=>&$detail) {
			               $registred_all_published_course=0;
			               foreach($published_course_ids as $pidd=>$pvv){
			             
			                    $check=$this->CourseRegistration->find('count',
			                    array('conditions'=>array('CourseRegistration.student_id'=>$detail['Student']['id'],'CourseRegistration.published_course_id'=>$pvv)));
			                    if($check>0){
			                        // $students_list_not_registred[]=$detail;
			                        $registred_all_published_course++;
			                    }
			               }
			               //unset
			               if ($registred_all_published_course>0) {
			                  unset($students[$id]);
			                  $registred_all_published_course=0;
			               }
			      }
			   }
			      //organize by program, program type, year_level,and section 
			  if(!empty($students)){
			   
			    foreach($students as $student_key=>$student_value){
			            if (!empty($student_value['StudentsSection'])
			            && count($student_value['StudentsSection'])>0) {
			              
			               if (empty($student_value['Section'][0]['year_level_id'])) {
			                   $student_value['Section'][0]['year_level_id']=0;//freshman 
			                   $organized_students[$student_value['Program']['name']][$student_value['ProgramType']['name']][$student_value['Section'][0]['year_level_id']][$student_value['StudentsSection'][0]['section_id']][]=$student_value;
			          
			               } else {
			                  $organized_students[$student_value['Program']['name']][$student_value['ProgramType']['name']][$student_value['Section'][0]['year_level_id']][$student_value['StudentsSection'][0]['section_id']][]=$student_value;
			          
			               }
			               /*
			                if (!empty($student_value['Section'][0]['year_level_id'])) {
			                
			              }
			              */
			            }
			    }
			    return $organized_students;
			  }
			 return $organized_students;
			 //return $students;	
				
	  }
	  function maintain_registration($student_id=null) {
	        $latest_academic_year=$this->AcademicYear->current_academicyear();
	        if ($student_id) {
	          
	            $this->data['Student']['studentnumber']=$this->CourseRegistration->Student->field('Student.studentnumber',
			                 array('Student.id'=>$student_id));
			  
                 if (!empty($this->department_ids)) {
                    $elegible_registrar_responsibility=$this->CourseRegistration->Student->find('count',array('conditions'=>array('Student.id'=>$student_id,'Student.department_id'=>$this->department_ids)));
                 } else if (!empty($this->college_ids)) {
                                $elegible_registrar_responsibility=$this->CourseRegistration->Student->find('count',array('conditions'=>array('Student.id'=>$student_id,'Student.college_id'=>$this->college_ids,'Student.department_id is null')));         
                    
                 }
                
                 if ($elegible_registrar_responsibility==0) {
                        $this->Session->setFlash('<span></span> You do not have the privilage to register the selected student.','default',array('class'=>'error-box error-message'));
	                        $this->data['Student']['studentnumber']=null;       
                 } else {
                 
	                $this->params['form']['continue']=true;
	             }
	        }
	        // The system asks the user to enter student identification number
            //OR to make selection for step number
             if(!empty($this->data) && isset($this->params['form']['continue'])){
                
                 $students=$this->_student_list_not_registred($this->data);
                 
                 if(empty($students) && $student_id="" ){
                 
                    $this->Session->setFlash('<span></span>There is no result in the given criteria that needs course registration maintaince for '.$this->AcademicYear->current_academicyear().' Academic Year.','default',
		                   array('class'=>'info-box info-message'));
                     //$students=$this->_student_list_not_registred();
                 }
                 
                 if (!empty($this->data['Student']['studentnumber'])) {
                    //$latest_academic_year=$this->AcademicYear->current_academicyear();
                    $student_id = $this->CourseRegistration->Student->field('Student.id',
			                 array('Student.studentnumber like '=>trim($this->data['Student']['studentnumber'])));
			                 
			          $latestAcSemester= $this->CourseRegistration->
			          getLastestStudentSemesterAndAcademicYear($student_id,$latest_academic_year);
	                   $latestSemester=$latestAcSemester['semester'];
			          
	                $student_section= $this->CourseRegistration->Student->student_academic_detail(
	                   $student_id,$latest_academic_year);
	                
	                
	                   
                    $published_courses=$this->CourseRegistration->registerSingleStudent(
                    $student_id,$latest_academic_year);
			        
			        if ($published_courses['passed'] === false ) {
			           $this->Session->setFlash('<span></span>'.__('Your academic status is dismissed you can not register for semester '.$latestSemester.'/'.$latest_academic_year.'.', true),'default',array('class'=>'info-box info-message'));
			           $dismissed=true;
			           $this->set(compact('dismissed'));
			        }
			        
			        $previous_status_semester=$this->CourseRegistration->Student->StudentExamStatus->
	       getPreviousSemester($latest_academic_year,$latestSemester);
	       
			       $latest_status_year_semester = $this->CourseRegistration->Student->StudentExamStatus->studentYearAndSemesterLevelOfStatusDisplay($student_id, $latest_academic_year,$previous_status_semester['semester']);  
			       
	                $student_section_exam_status=$this->CourseRegistration->Student->
	                get_student_section($student_id,$latest_academic_year,$latest_status_year_semester['semester']);
	              
		           $published_courses=$published_courses['register'];
		           if(empty($published_courses)){
		           $this->Session->setFlash('<span></span> There is no courses publisehd for the selected students for the current academic year, or you do not have the privilage to register this students. Please contact his/her department.','default',
		                   array('class'=>'error-box error-message'));
	               }
		           $this->set('hide_search',true);
                   $this->set(compact('published_courses',
                   'student_section','year_level_name','student_section_exam_status'));
                             
                 }
              
                 $this->set(compact('students')); 
                 
 
 
 
 
                 
                 /*****************************regiration via registrar working on e**************************/
                 /*if(!empty($this->data['Student']['studentnumber'])){
                           
		                     $this->CourseRegistration->Section->Student->bindModel(array('hasMany'=>array('StudentsSection'=>array('conditions'=>array('StudentsSection.archive'=>0)))));
		                     $studentss=$this->CourseRegistration->Section->Student->find('first',array('conditions'=>array(
				'Student.studentnumber LIKE '=> trim($this->data['Student']['studentnumber']).'%','Student.id NOT IN (select student_id from graduate_lists)'),
				'contain'=>array('StudentsSection'),'fields'=>array('Student.id','Student.studentnumber','Student.full_name')));
				
			                //Please enter a valid student number
			                
			                if(empty($studentss)){
			                  $this->Session->setFlash('<span></span>Please enter a valid student number','default',
		                   array('class'=>'error-box error-message'));
			                } else {
			                     
			                 if (!empty($studentss)) {
	                            if (count($studentss['StudentsSection'])>0) {
	                            
	                              $student_section= 
	                              $this->CourseRegistration->Student->
	                              student_academic_detail($studentss['Student']['id'],
	                              $this->AcademicYear->current_academicyear());
	                            
	                             $year_level_id=$this->CourseRegistration->Section->field('Section.year_level_id',
			                 array('Section.id'=>$studentss['StudentsSection'][0]['section_id']));
		                        $year_level_name=$this->CourseRegistration->Section->YearLevel->field('YearLevel.name',array('YearLevel.id'=>$year_level_id));	
		                        debug($this->department_ids);                    
	                           if (!empty($this->department_ids)) {
	                            $published_courses=$this->CourseRegistration->PublishedCourse->find('all',
	                            array('conditions'=>array('PublishedCourse.department_id'=>$this->department_ids,
	                            'PublishedCourse.section_id'=>
	                            $studentss['StudentsSection'][0]['section_id'],
	                          'PublishedCourse.add'=>0,
	                          
	                            'PublishedCourse.year_level_id'=>$year_level_id,
	                            'PublishedCourse.semester'=>'II',
	                            'PublishedCourse.academic_year LIKE'=>
	                            $this->AcademicYear->current_academicyear().'%'),
	                            'contain'=>array('Course'=>array('fields'=>array('Course.id','Course.course_code','Course.course_title','Course.lecture_hours',
	                            'Course.tutorial_hours','Course.credit'),'order'=>'PublishedCourse.semester asc '))));
	                          
	                           
	                           }  else if (!empty($this->college_ids)) {
										   $published_courses=$this->CourseRegistration->PublishedCourse->find('all',
	                            array('conditions'=>array('PublishedCourse.college_id'=>
	                            $this->college_ids,
	                            'PublishedCourse.section_id'=>$studentss['StudentsSection'][0]['section_id'],'PublishedCourse.drop'=>0,
	                            'PublishedCourse.academic_year LIKE'=>$this->AcademicYear->current_academicyear().'%'),'contain'=>array('Course'=>array('fields'=>array('Course.id','Course.course_code','Course.course_title','Course.lecture_hours',
	                            'Course.tutorial_hours','Course.credit'),'order'=>'PublishedCourse.semester asc '))));
	                           
	                           } else {
	                             $published_courses=array();
	                           }
	                           $published_courses=$this->CourseRegistration->registerSingleStudent($studentss['Student']['id'],
			                $this->AcademicYear->current_academicyear());
			                   
	                            if (empty($published_courses)) {
	                               $this->Session->setFlash('<span></span> There is no courses publisehd for the selected students for the current academic year, or you do not have the privilage to register this students. Please contact his/her department.','default',
		                   array('class'=>'error-box error-message'));
	                            } else {
	                               $this->set('hide_search',true);
	                               $this->set(compact('published_courses','student_section','year_level_name'));
	                            
	                            }
	                          
	            
	                       } else {
	                               $this->Session->setFlash('<span></span> The selected student does not have a class s/he has attached. Please contact his/her department.','default',
		                   array('class'=>'error-box error-message'));
	                            }
	                         }
		                         
		           } 
                } 
                */  
              ////////////////////////////////////////////////////////////////////////////     
            } 
            
            if (!empty($this->data) && isset($this->params['form']['register'])) {
                 /*$save_in_join_table=array();
	             foreach ($this->data['CourseRegistration'] as $ck=>&$cv ) {
	                  $cv['academic_year']=$this->AcademicYear->current_academicyear();
	                  $save_in_join_table['CoursesStudent'][$ck]['course_id']=$cv['course_id'];
	                  $save_in_join_table['CoursesStudent'][$ck]['student_id']=$cv['student_id'];
	             }
	             */
	            
	            //check students has already registered  
	            debug($this->data);
	            $semester=$this->data['CourseRegistration'][1]['semester'];
	            $not_registered=$this->CourseRegistration->alreadyRegistred($this->data['CourseRegistration'][1]['semester'],$this->AcademicYear->current_academicyear(),$this->data['CourseRegistration'][1]['student_id']);
	            if ($not_registered == 0) {
	                //Save course registration.
	                if (!empty($this->data['CourseRegistration'])) {
	                    
	                    if ($this->CourseRegistration->saveAll($this->data['CourseRegistration'],array('validate'=>false))) {
	                       $student_name = $this->CourseRegistration->Student->field('full_name',
	                    array('Student.id'=>$this->data['CourseRegistration'][0]['student_id']));
	                        
	                         $this->Session->setFlash('<span></span>'.__('You have successfully registered '.$student_name.' for '.$this->AcademicYear->current_academicyear().' of  semester '.$semester.'', true),'default',array('class'=>'success-box success-message'));
	                         if ($this->Session->read('search_data')) {
	                           $this->Session->delete('search_data');
	                         }
	                         $this->redirect(array('action'=>'maintain_registration'));
	                    } 
	                    //debug($this->CourseRegistration->invalidFields());
	                }
	            } else {
	              $this->Session->setFlash('<span></span>'.__('The student has already registered for '.$this->AcademicYear->current_academicyear().' academic year of  semester '.$semester.'', true),'default',array('class'=>'error-box error-message'));
	             //$this->redirect(array('action'=>'maintain_registration'));
	            }
              
          }
          
        
          if (empty($this->data)) {
          
			 $students=$this->_student_list_not_registred();	
			
			 $this->set(compact('students'));
          }
           if ( $this->role_id == ROLE_REGISTRAR) {
               
		           $year_level_find=$this->CourseRegistration->YearLevel->find('all',
		           array('fields'=>array('DISTINCT YearLevel.name','YearLevel.id'),
		          'order'=>'YearLevel.name asc','group'=>'YearLevel.name','recursive'=>-1));
		            $extract=Set::extract('/YearLevel/name', $year_level_find);
		            $another=Set::extract('/YearLevel/id',$year_level_find);
		            $combined=array_combine($another, $extract);
		            $yearLevels=$combined;
		       
		    $programs=$this->CourseRegistration->Student->Program->find('list',
             array('conditions'=>array('Program.id'=>$this->program_id)));
		    $departments=$this->CourseRegistration->Student->Department->find('list',
          array('conditions'=>array('Department.id'=>$this->department_ids)));
             $programTypes=$this->CourseRegistration->Student->ProgramType->find('list');
             $this->set(compact('departments','yearLevels','programs','programTypes'));
            
          }
          
          $latest_semester_academic_year=$this->CourseRegistration->latest_academic_year_semester();
          
          if(!empty($this->department_ids)){
              $departments=$this->CourseRegistration->Student->Department->find('list',
              array('conditions'=>array('Department.id'=>$this->department_ids)));
              $sections=$this->CourseRegistration->PublishedCourse->Section->find('list',
              array('conditions'=>array('Section.department_id'=>$this->department_ids)));
              
              $yearLevels=$this->CourseRegistration->PublishedCourse->YearLevel->find('list',
              array('conditions'=>array('YearLevel.department_id'=>$this->department_ids)));
              
          } else if (!empty($this->college_ids)) {
              $colleges=$this->CourseRegistration->Student->College->find('list',
              array('conditions'=>array('College.id'=>$this->college_ids)));
              $sections=$this->CourseRegistration->PublishedCourse->Section->find('list',
              array('conditions'=>array('Section.college_id'=>$this->college_ids)));
                      
          }
          
          
          $this->set(compact('departments','colleges','latest_semester_academic_year','sections','yearLevels'));
            
	  }
	  
	  function __init_search() {
        // We create a search_data session variable when we fill any criteria 
        // in the search form.
        if(!empty($this->data['Student'])){
               
                    $search_session = $this->data['Student'];
                   // Session variable 'search_data'
                    $this->Session->write('search_data_registration', $search_session);
                
        } else {

        	$search_session = $this->Session->read('search_data_registration');
        	$this->data['Student'] = $search_session;
        } 

    }
	  
	  /**
	  * Function to cancel registration of selected department
	  * given academic year,semester.
	  */
	  function cancel_registration () {
	       
	      // Function to load/save search criteria.
               
        if ($this->Session->read('search_data_registration')) {
                       $this->params['form']['getsection']=true;
                       $this->data['Student']=$this->Session->read('search_data_registration');
                       $this->set('hide_search',true);
                      
        }
        
	    if (!empty($this->data) && isset($this->params['form']['canceregistration'])) {
	          //$selectedsections=array_keys($this->data['PublishedCourse']);
	          $one_is_selected=false;
	          foreach ($this->data['PublishedCourse'] as $section_id=>$publishedcourse) {
	               foreach($publishedcourse as $p_id=>$selected){ 
	                    if ($selected==1) {
	                         $one_is_selected=true;
	                         break 2;
	                    }
	                }
	          }
	          //check if checked.
	          if ($one_is_selected) {
	                $selected_published_courses=array();
	                
	                foreach ($this->data['PublishedCourse'] as $section_id=>$publishedcourse) {
	                       foreach($publishedcourse as $p_id=>$selected){ 
	                            if ($selected==1) {
	                                $selected_published_courses[]=$p_id;
	                             }
	                        }
	                 }
	                 
	               if(!empty($selected_published_courses)) {
	                     //foreach publish course
	                      $register_for_delete['register']=array();
	                      $tmp=array();
	                      $add_for_delete['add']=array();
	                      $grade_submitted_pub_count = 0;
	                      foreach ($selected_published_courses as $key=>$pid) {
	                      	   $is_grade_submitted = $this->CourseRegistration->ExamGrade->is_grade_submitted($pid);
	                      	   //check again if grade si not submitted then allow cancellation.
	                      	   if (!$is_grade_submitted) { 
	                          	   $tmp=$this->CourseRegistration->PublishedCourse->getStudentsTakingPublishedCourse($pid);
	                          	   
	                               if(!empty($tmp['register']) && count($tmp['register'])>0) {
	                                    foreach($tmp['register'] as $index=>$value){
	                                      
	                                        $register_for_delete['register'][]=
	                                        $value['CourseRegistration']['id'];
	                                    }
	                               
	                               }
	                               if(!empty($tmp['add']) && count($tmp['add'])>0) {
	                                    foreach($tmp['add'] as $index=>$value){
	                                        if (!empty($value['CourseAdd']['id'])) {
	                                            $add_for_delete['add'][]=$value['CourseAdd']['id'];
	                                        }
	                                    }
	                               
	                               }
	                               $tmp=array();
	                           } else {
	                             $grade_submitted_pub_count++;
	                           }
                         }
                         
                         
                      if (count($selected_published_courses) !=$grade_submitted_pub_count) {  
                             if(!empty($register_for_delete['register'])) {
	                            
	                           if($this->CourseRegistration->deleteAll(
	                             array('CourseRegistration.id'=>$register_for_delete['register']), false)) {
							          
				                 }
				                
				             }
				            if (!empty($add_for_delete['add'])) {
				               if($this->CourseRegistration->PublishedCourse->CourseAdd->deleteAll(array('CourseAdd.id'=>$add_for_delete['add']), false)) {
							    }
				            }
				            if (!empty($register_for_delete['register']) || !empty($add_for_delete['add'])) {
				                 $this->Session->setFlash('<span></span>'.__('Course registration is cancelled for selected courses.', true), 'default', array('class' => 'success-message success-box'));
							     
				            }
		     		  } else {
		                          $this->Session->setFlash('<span></span>'.__('You can not cancel the course registration grade has already submitted.', true), 'default', array('class' => 'info-message 
		                          info-box'));
				      
				      }  
				       // $this->redirect(array('action'=>'index'));
				      
	               }
	          } else {
	                  $this->Session->setFlash('<span></span> '.__('Please select courses you want to cancel registration for mass students.', true),'default',array('class'=>'error-box error-message')); 
	          
	          }
	        
	   }
	  if (!empty($this->data) && isset($this->params['form']['getsection'])) {
			$this->Session->delete('search_data_registration');
			$everythingfine=false;
			switch($this->data) {
			        case empty($this->data['Student']['academic_year']) :
			         $this->Session->setFlash('<span></span> '.__('Please select the academic year you want to cancel course registration.', true),'default',array('class'=>'error-box error-message'));  
			         break; 
			        case empty($this->data['Student']['semester']) :
			         $this->Session->setFlash('<span></span> '.__('Please select the semester you want to cancel  course registration.', true),'default',array('class'=>'error-box error-message'));  
			         break; 
			         case empty($this->data['Student']['department_id']) :
			         $this->Session->setFlash('<span></span> '.__('Please select the department you want to cancel  course registration.', true),'default',array('class'=>'error-box error-message'));  
			         break; 
			         case empty($this->data['Student']['year_level_id']) :
			         $this->Session->setFlash('<span></span> '.__('Please select the year level you want cancel course registration.', true),'default',array('class'=>'error-box error-message'));  
			         break;    
			         case empty($this->data['Student']['program_id']) :
			         $this->Session->setFlash('<span></span> '.__('Please select the program you want to cancel courses registration.', true),'default',array('class'=>'error-box error-message'));  
			         break;    
			         case empty($this->data['Student']['program_type_id']) :
			         $this->Session->setFlash('<span></span> '.__('Please select the program type you want to cancel course registration.', true),'default',array('class'=>'error-box error-message'));  
			         break;  
			         default:
			         $everythingfine=true;
			                
			}
			if ($everythingfine) {
			        // yearlevel map for the selected department
			       // debug($this->data['Student']['year_level_id']);
			      
			        $yearLevelId=$this->CourseRegistration->PublishedCourse->YearLevel->field('id',
			       array('YearLevel.department_id'=>$this->data['Student']['department_id'],
			       'YearLevel.name'=>$this->data['Student']['year_level_id']));
			        //debug($this->data['Student']['department_id']);
			        //debug($yearLevelId);
			        $sections=$this->CourseRegistration->Section->find('list',array('conditions'=>array(
			        'Section.department_id'=>$this->data['Student']['department_id'],'Section.year_level_id'=>$yearLevelId,'Section.program_id'=>$this->data['Student']['program_id'],'Section.program_type_id'=>$this->data['Student']['program_type_id']
			        
			        )));
			      
			     
			       
			      $listOfPublishedCourses=$this->CourseRegistration->PublishedCourse->find('all',array('conditions'=>array(
			        'PublishedCourse.department_id'=>$this->data['Student']['department_id'],
			        'PublishedCourse.year_level_id'=>$yearLevelId,
			        'PublishedCourse.drop'=>0,
			        'PublishedCourse.program_id'=>$this->data['Student']['program_id'],
			        'PublishedCourse.program_type_id'=>$this->data['Student']['program_type_id'],
			        'PublishedCourse.semester'=>$this->data['Student']['semester'],
			            "OR"=>array(
			                'PublishedCourse.id IN (select published_course_id from course_registrations)',
			                 'PublishedCourse.id IN (select published_course_id from course_adds)'
			            ),
			        ),'fields'=>array('id','section_id'),
			        'contain'=>array('Course'=>array('fields'=>array('id','course_title','course_code','lecture_hours','tutorial_hours','credit')))));
			       debug($listOfPublishedCourses);
			       $organized_published_course_by_section=array();
			       $publish_courses_list_ids = array();
			       
			       foreach($listOfPublishedCourses as $lp=>$lv){
			             if (isset($lv['PublishedCourse']['section_id']) && !empty($lv['PublishedCourse']['section_id'])) {  
			              
			             $organized_published_course_by_section[$lv['PublishedCourse']['section_id']][]=$lv;
			             $publish_courses_list_ids[]=$lv['PublishedCourse']['id'];
			            }
			        }
			        
			        $publishedCourseRegister = $this->CourseRegistration->find('all',array('conditions'=>array(
			        'CourseRegistration.published_course_id'=>$publish_courses_list_ids,
			        'CourseRegistration.published_course_id IN (select published_course_id from course_registrations)',
			        'CourseRegistration.id NOT IN (select course_registration_id from exam_grades where 
			        course_registration_id is not null)'
			        
			        ),
			        'order'=>'CourseRegistration.id DESC',
			        'contain'=>array('ExamGrade','PublishedCourse'=>array('Course'))));
			        
			        $publishedCourseAdd = ClassRegistry::
	    init('CourseAdd')->find('all',array('conditions'=>array(
			        'CourseAdd.published_course_id'=>$publish_courses_list_ids,
			        'CourseAdd.published_course_id IN (select published_course_id 
			        from course_adds)',
			        'CourseAdd.id NOT IN (select course_add_id from exam_grades where course_add_id is not null)'
			        
			        ),
			        'contain'=>array('ExamGrade','PublishedCourse'=>array('Course'))));
			     
			        
			       
			        if (empty($publishedCourseRegister) && empty($publishedCourseAdd) ) {
			              $this->Session->setFlash('<span></span> '.__('No result is found. Either grade is submitted or there is no course registration in the selected criteria.', true),'default',array('class'=>'info-box info-message'));  
			        
			        } else {
			             $this->__init_search();
			             
			             
			             
			             $published_course_ids=array();
			             foreach ($publishedCourseRegister as $pk=>&$pv) {
			                
			                if (array_key_exists($pv['CourseRegistration']['section_id'],
			               $sections)) {
			                  $section_organized_published_course[$pv['CourseRegistration']['section_id']][]=$pv;
			                   $section_organized_course[$pv['CourseRegistration']['published_course_id']][
			                   $pv['CourseRegistration']['section_id']]=$pv;
			                   $published_course_ids[$pv['PublishedCourse']['section_id']][]=$pv['CourseRegistration']['published_course_id'];
			                }
			            }
			           $students_organized_by_section=array();
			           foreach($published_course_ids as $section_id=>$published_course_id){
			                for($i=0;$i<count($published_course_id);$i++) {
			                $students_organized_by_section[$section_id][$published_course_id[$i]]=
			                $this->CourseRegistration->PublishedCourse->getStudentsTakingPublishedCourse($published_course_id[$i]);
			                }
			           }
			          // debug($students_organized_by_section);
			           $this->set('hide_search',true);
			           $this->set('coursesss',$section_organized_published_course);
			           $listofPublishedCourses=$organized_published_course_by_section;
			           $this->set(compact('sections','listOfPublishedCourses'));
			          $this->set(compact('organized_published_course_by_section'));
			     
			         
			        
			        }
			        
			        $year_level_id=$this->data['Student']['year_level_id'];
			        $program_name=$this->CourseRegistration->PublishedCourse->Program->field('Program.name',array('Program.id'=>$this->data['Student']['program_id']));
			        $program_type_name=$this->CourseRegistration->PublishedCourse->ProgramType->field('ProgramType.name',array('ProgramType.id'=>$this->data['Student']['program_type_id']));
			        $academic_year=$this->data['Student']['academic_year'];
			        $semester=$this->data['Student']['semester'];
			        $department_name=$this->CourseRegistration->PublishedCourse->Department->field(
			        'Department.name',array('Department.id'=>$this->data['Student']['department_id']));
			        
			       
			        $this->set(compact('sections','year_level_id','program_name','program_type_name',
			     'academic_year','semester','department_name'));  
			      
			
		   }
	 }
	  if ( $this->role_id == ROLE_REGISTRAR) {
	       /*
		   $year_level_find=$this->CourseRegistration->YearLevel->find('all',
		   array('fields'=>array('DISTINCT YearLevel.name','YearLevel.id'),
		  'order'=>'YearLevel.name asc','group'=>'YearLevel.name','recursive'=>-1));
		    $extract=Set::extract('/YearLevel/name', $year_level_find);
		    $another=Set::extract('/YearLevel/id',$year_level_find);
		    $combined=array_combine($another, $extract);
		    $yearLevels=$combined;
		   */
		   $yearLevels =$this->CourseRegistration->YearLevel->distinct_year_level();
		    $programs=$this->CourseRegistration->Student->Program->find('list',
             array('conditions'=>array('Program.id'=>$this->program_id)));
		    $departments=$this->CourseRegistration->Student->Department->find('list',
          array('conditions'=>array('Department.id'=>$this->department_ids)));
             $this->set(compact('departments','yearLevels','programs'));
           
		
		} else {
		   $departments=$this->CourseRegistration->Department->find('list',array('conditions'=>
		   array('Department.id'=>$this->department_id)));
		   $yearLevels=$this->CourseRegistration->YearLevel->find('list',array('conditions'=>
		   array('YearLevel.department_id'=>$this->department_id)));
		   $programs=$this->CourseRegistration->Student->Program->find('list');
		  $this->set(compact('departments','yearLevels','programs'));
		}
		$programTypes=$this->CourseRegistration->Student->ProgramType->find('list');
		$this->set(compact('programTypes'));
	      
            
	  }
	  
	  function show_course_registred_students($published_course_id=null) {
	        $this->layout='ajax';
	          /// give the user the list of courses which is already displayed
					// from the session when validation error occur.
			$registred_students=$this->CourseRegistration->PublishedCourse->getStudentsTakingPublishedCourse($published_course_id);
			/*
		    if ($this->Session->read('registred_students')) {
		  
		          if ($data == 'xxx') {
		              $registred_students= $this->Session->read('registred_students');
		             
		          } else {
		            
		              $this->Session->delete('registred_students');
	                  
		          }
		    } else {
		        $registred_students=$this->CourseRegistration->PublishedCourse->getStudentsTakingPublishedCourse($published_course_id);
		        debug($registred_students);
		        $this->Session->Write('registred_students',$registred_students);
		    }
		   */
	        $this->set(compact('registred_students'));
		   
	 } 
	
	function get_course_registered_grade_list($register_or_add = null) {
		$this->layout = 'ajax';
		$grade_scale = array();
		if($register_or_add != "0" && $register_or_add != "") {
			$register_or_add = explode('~', $register_or_add);
			if(strcasecmp($register_or_add[1], 'add') == 0) {
				$published_course_id = $this->CourseRegistration->PublishedCourse->CourseAdd->field('published_course_id', array('id' => $register_or_add[0]));
			}
			else {
				$published_course_id = $this->CourseRegistration->field('published_course_id', array('id' => $register_or_add[0]));
			}
		
		$grade_scale = $this->CourseRegistration->PublishedCourse->CourseRegistration->getPublishedCourseGradeScaleList($published_course_id);
		//$grade_scale = $grade_scale + array('NG' => 'NG');
		$grade_scale = array('0' => '--- Select Grade ---') + $grade_scale;
		}
		$this->set(compact('grade_scale'));
	}
	
	function get_course_registered_grade_result($register_or_add = null) {
		$this->layout = 'ajax';
		$grade_history = array();
		if($register_or_add != "0" && $register_or_add != "") {
			$register_or_add = explode('~', $register_or_add);
			if(count($register_or_add) == 2) {
				if($register_or_add[1] == 'register')
					$grade_history = $this->CourseRegistration->getCourseRegistrationGradeHistory($register_or_add[0]);
				else
					$grade_history = $this->CourseRegistration->PublishedCourse->CourseAdd->getCourseAddGradeHistory($register_or_add[0]);
			}
		}
		$this->set(compact('grade_history', 'register_or_add'));
	}
	
	function _givenPublisheCourseReturnDept ($publish_course_ids=array()) {
	   //write it as function and reuse 
         //$department_colleges_ids = array ();
         $department_colleges_ids['dept']=array();
         $department_colleges_ids['college']=array();
         if (!empty($publish_course_ids)) {
             foreach ($publish_course_ids as $id=>$idvalue) {
                        /*if (!empty($idvalue['department_id'])) {        
                                    $department_ids[] =$this->CourseRegistration->PublishedCourse->field('department_id',array('PublishedCourse.id'=>$idvalue)); 
                          }
                          */
                          $college_department=$this->CourseRegistration->PublishedCourse->find('first',
                          array('conditions'=>array('PublishedCourse.id'=>$idvalue),
                          'fields'=>array('department_id','college_id'),'recursive'=>-1));
                         
                           if (!empty($college_department['PublishedCourse']['department_id'])) {
                              $department_colleges_ids['dept'][]=$college_department['PublishedCourse']['department_id'];
                           } else {
                             $department_colleges_ids['college'][]=$college_department['PublishedCourse']['college_id'];
                           }   
             }
         }
         return $department_colleges_ids;
	}
	
}
