<?php
class CourseDrop extends AppModel {
	var $name = 'CourseDrop';
	var $validate = array(
	    'minute_number' => array(
			'notempty' => array(
				'rule' => array('notempty'),
				'message' => 'Please provide minutes number.',
				//'allowEmpty' => false,
				//'required' => false,
				//'last' => false, // Stop validation after this rule
				//'on' => 'create', // Limit validation to 'create' or 'update' operations
			),
		),
	   'reason' => array(
			'notempty' => array(
				'rule' => array('notempty'),
				'message' => 'Please provide reason.',
				//'allowEmpty' => false,
				//'required' => false,
				//'last' => false, // Stop validation after this rule
				//'on' => 'create', // Limit validation to 'create' or 'update' operations
			),
		),
		
	);
	/*var $validate = array(
		'year_level_id' => array(
			'numeric' => array(
				'rule' => array('numeric'),
				//'message' => 'Your custom message here',
				//'allowEmpty' => false,
				//'required' => false,
				//'last' => false, // Stop validation after this rule
				//'on' => 'create', // Limit validation to 'create' or 'update' operations
			),
		),
		'semester' => array(
			'notempty' => array(
				'rule' => array('notempty'),
				//'message' => 'Your custom message here',
				//'allowEmpty' => false,
				//'required' => false,
				//'last' => false, // Stop validation after this rule
				//'on' => 'create', // Limit validation to 'create' or 'update' operations
			),
		),
		'academic_year' => array(
			'notempty' => array(
				'rule' => array('notempty'),
				//'message' => 'Your custom message here',
				//'allowEmpty' => false,
				//'required' => false,
				//'last' => false, // Stop validation after this rule
				//'on' => 'create', // Limit validation to 'create' or 'update' operations
			),
		),
		'approval' => array(
			'boolean' => array(
				'rule' => array('boolean'),
				//'message' => 'Your custom message here',
				//'allowEmpty' => false,
				//'required' => false,
				//'last' => false, // Stop validation after this rule
				//'on' => 'create', // Limit validation to 'create' or 'update' operations
			),
		),
		'approved_by' => array(
			'uuid' => array(
				'rule' => array('uuid'),
				//'message' => 'Your custom message here',
				//'allowEmpty' => false,
				//'required' => false,
				//'last' => false, // Stop validation after this rule
				//'on' => 'create', // Limit validation to 'create' or 'update' operations
			),
		),
		'minute_number' => array(
			'notempty' => array(
				'rule' => array('notempty'),
				//'message' => 'Your custom message here',
				//'allowEmpty' => false,
				//'required' => false,
				//'last' => false, // Stop validation after this rule
				//'on' => 'create', // Limit validation to 'create' or 'update' operations
			),
		),
		'forced' => array(
			'numeric' => array(
				'rule' => array('numeric'),
				//'message' => 'Your custom message here',
				//'allowEmpty' => false,
				//'required' => false,
				//'last' => false, // Stop validation after this rule
				//'on' => 'create', // Limit validation to 'create' or 'update' operations
			),
		),
		'student_id' => array(
			'numeric' => array(
				'rule' => array('numeric'),
				//'message' => 'Your custom message here',
				//'allowEmpty' => false,
				//'required' => false,
				//'last' => false, // Stop validation after this rule
				//'on' => 'create', // Limit validation to 'create' or 'update' operations
			),
		),
		'course_id' => array(
			'numeric' => array(
				'rule' => array('numeric'),
				//'message' => 'Your custom message here',
				//'allowEmpty' => false,
				//'required' => false,
				//'last' => false, // Stop validation after this rule
				//'on' => 'create', // Limit validation to 'create' or 'update' operations
			),
		),
	);
	*/
	//The Associations below have been created with all possible keys, those that are not needed can be removed

	var $belongsTo = array(
		'YearLevel' => array(
			'className' => 'YearLevel',
			'foreignKey' => 'year_level_id',
			'conditions' => '',
			'fields' => '',
			'order' => ''
		),
		'Student' => array(
			'className' => 'Student',
			'foreignKey' => 'student_id',
			'conditions' => '',
			'fields' => '',
			'order' => ''
		),
		'CourseRegistration' => array(
			'className' => 'CourseRegistration',
			'foreignKey' => 'course_registration_id',
			'conditions' => '',
			'fields' => '',
			'order' => ''
		)
	);
	
	/**
	*info student to drop courses which failed the prerequisite
	*/
	
    function prequisite_taken($student_id=null,$prerequisite_course_id=null) {
	       
	        
	        /*
	        $equivalent_course_ids= ClassRegistry::init('EquivalentCourse')->find('list',
	        array('conditions'=>array('EquivalentCourse.course_for_substitued_id'=>$prerequisite_course_id),'fields'=>array('course_be_substitued_id')));
	        
	        if (!empty($equivalent_course_ids)) {
					    $selected_course_id_array=array();
					     $selected_course_id_array[] = $prerequisite_course_id;
					    $prerequisite_course_id=array_merge( $selected_course_id_array,$equivalent_course_ids);
					   
			} 
			*/
			
			$prerequisite_course_id = $this->CourseRegistration->PublishedCourse->Course->getTakenEquivalentCourses($student_id, $prerequisite_course_id);
				    
	        $publishedCourseIds=$this->CourseRegistration->PublishedCourse->find('list',array('conditions'=>array(
	        'PublishedCourse.course_id'=>$prerequisite_course_id),
	        'fields'=>array('id'),'recursive'=>-1,'fields'=>'id'));
	        
	        $course_registration_ids = $this->CourseRegistration->find('list',
	        array('conditions'=>array('CourseRegistration.published_course_id'=>$publishedCourseIds,
	        'CourseRegistration.student_id'=>$student_id),'fields'=>'id', 'order' => array('CourseRegistration.created DESC')));
	        //check student is passed ?
	         if (!empty($course_registration_ids)) {
	            foreach($course_registration_ids as $key => $course_registration_id) {
	                $latest_grade = $this->CourseRegistration->getCourseRegistrationLatestApprovedGradeDetail($course_registration_id);
	               
	                //prerequist taken but grade is not submitted
	                if (empty($latest_grade)) {
	                     return 2; // on hold 
	                }
	                if(strcasecmp($latest_grade['type'],'Change')==0) {
	                    $grade_scale_id = $this->CourseRegistration->ExamGrade->field('grade_scale_id',
	                    array('ExamGrade.id'=>$latest_grade['ExamGrade']['exam_grade_id'])); 
	                    $gradeSubmitted = $this->isGradePassed(
	                $latest_grade['ExamGrade']['grade'],$grade_scale_id);
	                     //debug($gradeSubmitted);
	         
	                } else {
	                    $gradeSubmitted = $this->isGradePassed(
	                    $latest_grade['ExamGrade']['grade'],$latest_grade['ExamGrade']['grade_scale_id']);
	                }
	                //student is qualified to take course
	                if ($gradeSubmitted == 1) {
	                       return true;//normal registration 
	                } 
	            }             
	         }
	       
	        if (!empty($publishedCourseIds)) {
	            //check add 
	                $course_add_ids = ClassRegistry::
	    init('CourseAdd')->find('list',
	        array('conditions'=>array('CourseAdd.published_course_id'=>$publishedCourseIds,
	        'CourseAdd.student_id'=>$student_id),'fields'=>'id', 'order' => 'CourseAdd.created DESC'));
	               if (!empty($course_add_ids)) {
	                  foreach($course_add_ids as $key => $course_add_id) {  
	                    $latest_grade =ClassRegistry::init('CourseAdd')->getCourseAddLatestApprovedGradeDetail($course_add_id);
	                      
	                   
	                    //prerequist taken but grade is not submitted
	                    if (empty($latest_grade)) {
	                         return 2;
	                    }
	                    
	                    $gradeSubmitted = $this->isGradePassed(
	                    $latest_grade['ExamGrade']['grade'],$latest_grade['ExamGrade']['grade_scale_id']);
	                   
	                    //student is qualified to take course
	                    if ($gradeSubmitted == 1) {
	                           return true;//normal registration 
	                    } 
	                            
	                }
	           }
	       } 
	       
	      return false;  //failed the prerequiste 
	   }
	 /**
	 * check course is taken beforing displaying list of add courses for students.
	 */ 
    function course_taken($student_id=null,$course_id=null) {
	       /**
	       *1 -exclude from add 
	       *2 -exclude from add
	       *3 -allow add
	       *4 failed prequisite 
	       */
			
			$course_id = $this->CourseRegistration->PublishedCourse->Course->getTakenEquivalentCourses($student_id, $course_id);
			
			//does the course has prerequist 
			if ( $this->isPrerequisteExist($course_id) === true ) {
					if ($this->prequisite_taken($student_id, $course_id) === false ) {
						return 4;
			
					}
            }
            			    
	        $publishedCourseIds=$this->CourseRegistration->PublishedCourse->find('list',array('conditions'=>array(
	        'PublishedCourse.course_id'=>$course_id),
	        'fields'=>array('id'),'recursive'=>-1,'fields'=>'id'));
	        
	        $course_registration_ids = $this->CourseRegistration->find('list',
	        array('conditions'=>array('CourseRegistration.published_course_id'=>$publishedCourseIds,
	        'CourseRegistration.student_id'=>$student_id),'fields'=>'id', 'order' => array('CourseRegistration.created DESC')));
	        //check student is passed ?
	         if (!empty($course_registration_ids)) {
	            foreach($course_registration_ids as $key => $course_registration_id) {
	                $latest_grade = $this->CourseRegistration->getCourseRegistrationLatestApprovedGradeDetail($course_registration_id);
	               
	                //course taken but grade is exclude from add 
	                if (empty($latest_grade)) {
	                     return 2; // on exclude 
	                }
	                
	                if(strcasecmp($latest_grade['type'],'Change')==0) {
	                    $grade_scale_id = $this->CourseRegistration->ExamGrade->field('grade_scale_id',
	                    array('ExamGrade.id'=>$latest_grade['ExamGrade']['exam_grade_id'])); 
	                    $gradeSubmitted = $this->isGradePassed(
	                $latest_grade['ExamGrade']['grade'],$grade_scale_id);
	                     
	         
	                } else {
	                    $gradeSubmitted = $this->isGradePassed(
	                    $latest_grade['ExamGrade']['grade'],$latest_grade['ExamGrade']['grade_scale_id']);
	                }
	                //student is already taken courses dont allow add 
	                if ($gradeSubmitted == 1) {
	                       return 1;// exclude  
	                } 
	            }             
	         }
	       
	        if (!empty($publishedCourseIds)) {
	            //check add 
	                $course_add_ids = ClassRegistry::
	    init('CourseAdd')->find('list',
	        array('conditions'=>array('CourseAdd.published_course_id'=>$publishedCourseIds,
	        'CourseAdd.student_id'=>$student_id),'fields'=>'id', 'order' => 'CourseAdd.created DESC'));
	               if (!empty($course_add_ids)) {
	                  foreach($course_add_ids as $key => $course_add_id) {  
	                    $latest_grade =ClassRegistry::init('CourseAdd')->getCourseAddLatestApprovedGradeDetail($course_add_id);
	                      
	                   
	                  //course taken but grade is exclude from add 
	                if (empty($latest_grade)) {
	                     return 2; // on exclude 
	                }   
	                    $gradeSubmitted = $this->isGradePassed(
	                    $latest_grade['ExamGrade']['grade'],$latest_grade['ExamGrade']['grade_scale_id']);
	                   
			            //student is already taken courses dont allow add 
			            if ($gradeSubmitted == 1) {
			                   return 1;//normal registration 
			            } 
	                            
	                }
	           }
	       } 
	       
	      return 3;  //not taken any of the course allow  
	   }
	   /**
	   *Is the given grade pass or fail
	   */
	   function isGradePassed ($grade=null,$scale_id=null) {
            $is_grade_pass_mark = ClassRegistry::
	    init('GradeScale')->find('first',array('conditions'=>array('GradeScale.id'=>$scale_id),
	    'contain'=>array('GradeScaleDetail'=>array('Grade'=>array('id','pass_grade','grade'))))); 
          
           foreach ($is_grade_pass_mark['GradeScaleDetail'] as $index=>$value) {
                        
                                 if (strcasecmp($value['Grade']['grade'], $grade) == 0 
                                 && $value['Grade']['pass_grade']==1) {
                                    return 1;
                                 }
                        
           }
          
           return 0;	   
	   }
	   
	   function dropRecommendedCourses ($semester=null,$academic_year=null,$student_id=null) {
	           $coursesDrop=$this->CourseRegistration->find('all',
			 array('conditions'=>array('CourseRegistration.academic_year LIKE '=>$academic_year.'%','CourseRegistration.semester like '=>$semester.'%',
			 'CourseRegistration.student_id'=>$student_id,
    			 
			 'Student.id NOT IN (select student_id from graduate_lists)',
			  'CourseRegistration.id NOT IN (select course_registration_id from course_drops)',
			  'CourseRegistration.id NOT IN (select course_registration_id from exam_grades)'),
			 'contain'=>array('PublishedCourse'=>array(
			    
			    'Course'=>array('Prerequisite'=>array('id','course_id','prerequisite_course_id','co_requisite'))
			 ),
			 'Student'=>array('id','full_name','studentnumber'),
			 'ExamGrade')));
			 
			  $course_drop_reformat = array();
			  $count=0;
			  foreach ($coursesDrop as $index=>$value) {
			        if (!empty($value['PublishedCourse']['Course']['Prerequisite'])) {
			                 $passed_count=0;
			                 foreach ($value['PublishedCourse']['Course']['Prerequisite'] as $preindex=>$prevalue) {
			                       
			                     $pre_passed=$this->prequisite_taken($this->student_id,$prevalue['prerequisite_course_id']);             
			                        if ($pre_passed) {
			                             $passed_count++;
			                        }
			                 
			                 }
			                 if ($passed_count == count($value['PublishedCourse']['Course']['Prerequisite']) ) {
			                  $course_drop_reformat[$count]=$value;  
			                  $course_drop_reformat[$count]['prequisite_taken_passsed']=1;     
			                  
			                 } else {
			                   $course_drop_reformat[$count]=$value;
			                   $course_drop_reformat[$count]['prequisite_taken_passsed']=0;
			                   
			                 }
			        } else {
			             $course_drop_reformat[$count]=$value;
			            $course_drop_reformat[$count]['prequisite_taken_passsed']=1;
			           
			        }
			     $count++;
			  }
			  return $course_drop_reformat;
	   }
	   
	   function list_of_students_need_force_drop ($department_ids=null) {
<<<<<<< .mine
	        // debug($department_ids);
	         $type_of_registrations= array(21,22,23,31,32,33);
	         $coursesDrop=$this->CourseRegistration->find('all',
=======
	      
	         $type_of_registrations= array(31,32,33);
	          $list_of_registred_ids=array();
	         $coursesDrop=array();
	         if (!empty($department_ids)) {
	         
	         $listOfStudentCourseRegistrations=$this->CourseRegistration->find('all',
	         array('conditions'=>array('CourseRegistration.type'=>$type_of_registrations,
	         'Student.department_id'=>$department_ids),'contain'=>array('Student'=>array('id','department_id')),'fields'=>array('id','student_id')));
	         } else {
                
	         $listOfStudentCourseRegistrations=$this->CourseRegistration->find('all',
	         array('conditions'=>array('CourseRegistration.type'=>$type_of_registrations),'contain'=>array('Student'=>array('id','department_id')),'fields'=>array('id','student_id')));
	         
	         }
	         foreach ($listOfStudentCourseRegistrations as $index=>$registred_id) {
	               //incase regisration without student id 
	               if(!empty($registred_id['CourseRegistration']['student_id'])) { 
	                $list_of_registred_ids[]=$registred_id['CourseRegistration']['id'];
	               }
	         }
	         
	         
	         
	         $coursesDrop['list']=$this->CourseRegistration->find('all',
>>>>>>> .r353
	         array('conditions'=>array(
	            'CourseRegistration.id'=>$list_of_registred_ids,
	           
	            'Student.id NOT IN (select student_id from graduate_lists)',
	            'CourseRegistration.id NOT IN (select course_registration_id from course_drops where 
	            course_registration_id is not null )',
	            'CourseRegistration.id NOT IN (select course_registration_id from exam_grades
	            where course_registration_id is not null )'
	         ),
	         'contain'=>array('Student'=>array('Department'=>array('id','name'),'ProgramType'=>array('id','name'),
	         'Program'=>array('id','name'),'fields'=>array('id','program_id',
	         'program_type_id','department_id','studentnumber','full_name')),'CourseDrop','ExamGrade')));
	        $coursesDrop['count']=count($coursesDrop['list']);
		     return $coursesDrop;
	   }
	   
	   function drop_courses_list($student_id=null, $academic_year=null) 
	   {
	        $student_detail_with_list_of_registred_coures=array();
	     
	        $latest_academic_year_semester = $this->
	     CourseRegistration->getLastestStudentSemesterAndAcademicYear($student_id,$academic_year);
	      
	       $previous_status_semester=$this->CourseRegistration->Student->StudentExamStatus->
	       getPreviousSemester( $latest_academic_year_semester['academic_year'],
	        $latest_academic_year_semester['semester']);
	       
	      
		    $latest_status_year_semester = $this->CourseRegistration->Student->StudentExamStatus->studentYearAndSemesterLevelOfStatusDisplay($student_id, $latest_academic_year_semester['academic_year'],$previous_status_semester['semester']);  
			       
	       $student_section_exam_status=$this->CourseRegistration->Student->
	                get_student_section($student_id,
	                $latest_academic_year_semester['academic_year'],
	                $latest_status_year_semester['semester']);
	      
	      
	     $student_detail_with_list_of_registred_coures['student_basic']=$student_section_exam_status;
         $coursesDrop=$this->CourseRegistration->find('all',
         array('contain'=>array('PublishedCourse'=>array('Course'),'YearLevel'),
         'conditions'=>array('CourseRegistration.academic_year 
         like'=> $academic_year.'%',
        
         'CourseRegistration.semester'=>$latest_academic_year_semester['semester'],
         'CourseRegistration.year_level_id'=> $student_section_exam_status['Section']['year_level_id'],
         
         'CourseRegistration.student_id'=>$student_id,
         //'CourseRegistration.id NOT IN (select course_registration_id from course_drops) ',
         'CourseRegistration.id NOT IN (select course_registration_id from exam_grades where course_registration_id is not null )')));
        
         $already_dropped=array();
         if (!empty($coursesDrop)){
             foreach($coursesDrop as $index=>$value ){
                   $check=$this->find('count',array('conditions'=>array('CourseDrop.course_registration_id'=>$value['CourseRegistration']['id']),'recursive'=>-1));
                   if($check>0){
                     $already_dropped[]=$value['CourseRegistration']['id'];
                   }
             }
            
         }
        $student_detail_with_list_of_registred_coures['alreadyDropped']=$already_dropped;
        $student_detail_with_list_of_registred_coures['courseDrop']=$coursesDrop;
        $student_detail_with_list_of_registred_coures['semester']=$latest_academic_year_semester['semester'];
       // $student_detail_with_list_of_registred_coures['academic_year']=$coursesDrop;
	    return $student_detail_with_list_of_registred_coures;   
	   
	   }
	   
    /**
    * filter out the list of students who have registred but grade is not submitted 
    */
    
    function student_list_registred_but_not_dropped ($data=null) {
             $options = array();
	         $search_conditions = array();
	         $organized_students=array(); 
	         
<<<<<<< .mine
		     return $coursesDrop;
	   }
=======
	         $latest_semester_academic_year=$this->CourseRegistration->latest_academic_year_semester();
	         
            $search_conditions['conditions'][]=array('CourseRegistration.student_id NOT IN 
            (select student_id from graduate_lists)');
            $search_conditions['contain']=array('Student'=>array('fields'=>array('id','full_name','studentnumber'),'Department'=>array('id','name'),'Program'=>array('id','name'),
            'ProgramType'=>array('id','name')),'CourseDrop','ExamGrade');
             $search_conditions['conditions'][]=array(
                         'CourseRegistration.academic_year like'=>$latest_semester_academic_year['academic_year'].'%');
            $search_conditions['group']=array('CourseRegistration.student_id');
            $search_conditions['conditions'][]=array('CourseRegistration.id NOT IN 
            (select course_registration_id from exam_grades where course_registration_id is not null)');
             $search_conditions['conditions'][]=array('CourseRegistration.id NOT IN 
            (select course_registration_id from course_drops where course_registration_id is not null)');
           
                  if (!empty($data['Student']['department_id'])) {
                               $search_conditions['conditions'][] = array(
                                    'Student.department_id'=>$data['Student']['department_id']);
                  }
                  if (!empty($data['Student']['studentnumber'])) {
                               $search_conditions['conditions'][] = array(
                                    'Student.studentnumber'=>$data['Student']['studentnumber']);
                  }
                   
                   if (!empty($data['Student']['college_id'])) {
                          $search_conditions['conditions'][] = array(
                            'Student.college_id'=>$data['Student']['college_id'],
                            'Student.department_id is null');
                   
                   }
                   
                   if (!empty($data['Student']['semester'])) {
                         $search_conditions['conditions'][]=array(
                       
                        'CourseRegistration.semester'=>$data['Student']['semester']);
                   }
                   
                   if (!empty($data['Student']['program_id'])) {
                       $search_conditions['conditions'][] = array(
                            'Student.program_id'=>$data['Student']['program_id']);
                    }
                      
                   if (!empty($data['Student']['program_type_id'])) {
                          $search_conditions['conditions'][] = array(
                            'Student.program_type_id'=>$data['Student']['program_type_id']);
    
                   }
                   
                   if (!empty($this->department_ids) && empty($data['Student']['department_id']) && 
                   empty($data['Student']['studentnumber'])) {
                         $search_conditions['conditions'][] = array(
                            'Student.department_id'=>$this->department_ids);
                         
   
                   } else if (!empty($this->college_ids) && empty($data['Student']['college_id'])) {
                             $search_conditions['conditions'][] = array(
                            'Student.college_id'=>$college_ids['college'],
                            'Student.department_id is null'); 
                          
           
                  }
                   
                  $result = $this->CourseRegistration->find('all',$search_conditions);
                 // debug($result);
                  return $result;        
         
    }
    
    function isPrerequisteExist($course_id=null) {
    		$prequist=$this->CourseRegistration->PublishedCourse->Course->Prerequisite->find('count',
    		array('conditions'=>array('Prerequisite.course_id'=>$course_id)));
    		if($prequist>0) {
    			return true;
    		} else {
    			return false;
    		}
    }
>>>>>>> .r353
	  
}
