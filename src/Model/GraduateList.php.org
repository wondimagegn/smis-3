<?php
class GraduateList extends AppModel {
	var $name = 'GraduateList';
	var $displayField = 'minute_number';
	//The Associations below have been created with all possible keys, those that are not needed can be removed

	var $belongsTo = array(
		'Student' => array(
			'className' => 'Student',
			'foreignKey' => 'student_id',
			'conditions' => '',
			'fields' => '',
			'order' => ''
		)
	);
	
	//function isStudentGraduate(){
	
	//}
	
	function getListOfStudentsForGraduateList($program_id = null, $program_type_id = null, $department_id = null) {

		/***
			1. Get all students in the department who are in the senate list but not in the graduate list
		***/
		$options['conditions']['Student.program_id'] = $program_id;
		if($program_type_id != 0 && !empty($program_type_id))
			$options['conditions']['Student.program_type_id'] = $program_type_id;
		$options['conditions']['Student.department_id'] = $department_id;
		$options['conditions'][] = 'Student.curriculum_id IS NOT NULL';
		$options['conditions'][] = 'Student.curriculum_id <> 0';
		$options['conditions'][] = 'Student.id NOT IN (SELECT student_id FROM graduate_lists)';
		$options['conditions'][] = 'Student.id IN (SELECT student_id FROM senate_lists)';
		$options['contain'] = array(
			//'Curriculum.minimum_credit_points' => array('CourseCategory'),
			'Curriculum' => array('fields'=>array('id', 'minimum_credit_points', 'certificate_name', 'amharic_degree_nomenclature', 'specialization_amharic_degree_nomenclature', 'english_degree_nomenclature', 'specialization_english_degree_nomenclature', 'minimum_credit_points', 'name'), 'Department', 'CourseCategory'=>array('id',
			'curriculum_id')),
			'Department.name',
			'Program.name',
			'ProgramType.name',
			'CourseRegistration.id' => array('PublishedCourse.id' => array('Course.credit' => array('CourseCategory','GradeType'))),
			'CourseAdd.id' => array('PublishedCourse.id' => array('Course.credit' => array('CourseCategory','GradeType'))),
			'StudentExamStatus'
		);
		$options['fields'] = array('Student.full_name', 'Student.first_name', 'Student.middle_name', 'Student.last_name',
		'Student.curriculum_id',
		'Student.program_id','Student.program_type_id', 'Student.studentnumber',
		 'Student.admissionyear', 'Student.gender');
		$options['order'] = array('Student.first_name ASC', 'Student.middle_name ASC', 'Student.last_name ASC');
		//debug($options);
		$students = $this->Student->find('all', $options);
		debug($students);
		$organized_students = array();
		foreach($students as $key => $student) {
			$credit_sum = 0;
			$donot_consider_cgpa = false;
			$credit_hour_sum = 0;
			
			/*
			foreach($student['StudentExamStatus'] as $ses_key => $ses_value) {
				$credit_sum += $ses_value['credit_hour_sum'];
			}
			*/

		foreach($student['CourseAdd'] as $ses_key => $ses_value) {
			if($ses_value['PublishedCourse']['Course']['GradeType']['used_in_gpa']==false){
				$not_used_gpa_sum+= $ses_value['PublishedCourse']['Course']['credit'];
			}
			$credit_sum += $ses_value['PublishedCourse']['Course']['credit'];
		}
		foreach($student['CourseRegistration'] as $ses_key => $ses_value) {
			if($ses_value['PublishedCourse']['Course']['GradeType']['used_in_gpa']==false){
				$not_used_gpa_sum+= $ses_value['PublishedCourse']['Course']['credit'];
			}
			$credit_sum += $ses_value['PublishedCourse']['Course']['credit'];
		}
		
		$all_exempted_courses = $this->Student->CourseExemption->find('all',
				array(
					'conditions' =>
					array(
			'CourseExemption.student_id' => $student['Student']['id'],
'CourseExemption.department_accept_reject' => 1,
	'CourseExemption.registrar_confirm_deny' => 1,
					),
					'contain' => array('Course'=>array('CourseCategory'))
				)
			);
			$studentAttachedCurriculumIds=$this->Student->CurriculumAttachment->find('list',array(
					'conditions' =>
					array(
						'CurriculumAttachment.student_id' => $student['Student']['id'],
					),
					'fields' => array('curriculum_id', 'curriculum_id'),
					
			));
			$student_curriculum_course_list = $this->Student->Curriculum->Course->find('list',
				array(
					'conditions' =>
					array(
						'Course.curriculum_id'=>$studentAttachedCurriculumIds,
					),
					'fields' => array('id', 'credit'),
					'recursive' => -1
				)
			);
	$student_curriculum_course_id_list = array_keys($student_curriculum_course_list);
		    $only_exempted_credit=0;
			foreach($all_exempted_courses as $ec_key => $all_exempted_course) {
			
				//Check if the exempted course is from their curriculum
				if(in_array($all_exempted_course['CourseExemption']['course_id'], $student_curriculum_course_id_list)) {
					// why course_id ?
// we need to replace with course_taken_credit 
					$only_exempted_credit+=$student_curriculum_course_list[$all_exempted_course['CourseExemption']['course_id']];
					$credit_sum +=$all_exempted_course['Course']['credit'];
					 $course_categories[$all_exempted_course['Course']['CourseCategory']['name']]['taken_credit'] +=$all_exempted_course['Course']['credit'];

				}
			}
			
			
			if($credit_sum >= $student['Curriculum']['minimum_credit_points']) {
				$cid = $student['Curriculum']['id'];
				
				if(!isset($organized_students[$cid])) {
					$organized_students[$cid][0]['Curriculum'] = $student['Curriculum'];
					$organized_students[$cid][0]['Program'] = $student['Program'];
					$organized_students[$cid][0]['Department'] = $student['Department'];
				}
				$index = count($organized_students[$cid]);
				$organized_students[$cid][$index]['Student'] = $student['Student'];
				$organized_students[$cid][$index]['ProgramType'] = $student['ProgramType'];
				$organized_students[$cid][$index]['credit_taken'] = $credit_sum;
				$organized_students[$cid][$index]['disqualification'] = null;
				$last_status = $this->Student->StudentExamStatus->find('first',
					array(
						'conditions' =>
						array(
							'StudentExamStatus.student_id' => $student['Student']['id']
						),
						'order' => 
						array(
							'StudentExamStatus.created DESC'
						),
						'recursive' => -1
					)
				);
				if(!empty($last_status)) {
					$organized_students[$cid][$index]['cgpa'] = $last_status['StudentExamStatus']['cgpa'];
					$organized_students[$cid][$index]['mcgpa'] = $last_status['StudentExamStatus']['mcgpa'];
				}
			}
		}
		return $organized_students;
	}
	
	function temporaryDegree($student_id = null) {
	    $temporary_degree = array();
	   
		$student_detail = $this->Student->find('first',
			array(
				'conditions' =>
				array(
					'Student.id' => $student_id
				),
				'contain' =>
				array(
					'Curriculum',
					'GraduateList',
					'Program',
					'ProgramType',
					'Department',
					'College',
					'StudentExamStatus' => array('order' => array('StudentExamStatus.created DESC'))
				)
			)
		);
		$university_detail = ClassRegistry::init('University')->getStudentUnivrsity($student_id);
		//Student profile
		$temporary_degree['student_detail']['Student'] = $student_detail['Student'];
		$temporary_degree['student_detail']['Curriculum'] = $student_detail['Curriculum'];
		$temporary_degree['student_detail']['University'] = $university_detail;
		$temporary_degree['student_detail']['College'] = $student_detail['College'];
		$temporary_degree['student_detail']['Department'] = $student_detail['Department'];
		$temporary_degree['student_detail']['Program'] = $student_detail['Program'];
		$temporary_degree['student_detail']['ProgramType'] = $student_detail['ProgramType'];
		$temporary_degree['student_detail']['GraduateList'] = $student_detail['GraduateList'];
		$temporary_degree['student_detail']['StudentExamStatus'] = $student_detail['StudentExamStatus'][0];
		$temporary_degree['student_detail']['GraduationStatuse'] = ClassRegistry::init('GraduationStatus')->getStudentGraduationStatus($student_id);
		
	     return $temporary_degree;
	}


      function getTemporaryDegreeCertificateForMassPrint($student_ids = array()) {
	    $temporary_degree = array();
	    $temporary_degree_mass=array();
	    foreach($student_ids as $k=>$student_id) {

		$student_detail = $this->Student->find('first',
			array(
				'conditions' =>
				array(
					'Student.id' => $student_id
				),
				'contain' =>
				array(
					'Curriculum',
					'GraduateList',
					'Program',
					'ProgramType',
					'Department',
					'College',
					'StudentExamStatus' => array('order' => array('StudentExamStatus.created DESC'))
				)
			)
		);
		$university_detail = ClassRegistry::init('University')->getStudentUnivrsity($student_id);
		//Student profile
		$temporary_degree['student_detail']['Student'] = $student_detail['Student'];
		$temporary_degree['student_detail']['Curriculum'] = $student_detail['Curriculum'];
		$temporary_degree['student_detail']['University'] = $university_detail;
		$temporary_degree['student_detail']['College'] = $student_detail['College'];
		$temporary_degree['student_detail']['Department'] = $student_detail['Department'];
		$temporary_degree['student_detail']['Program'] = $student_detail['Program'];
		$temporary_degree['student_detail']['ProgramType'] = $student_detail['ProgramType'];
		$temporary_degree['student_detail']['GraduateList'] = $student_detail['GraduateList'];
		$temporary_degree['student_detail']['StudentExamStatus'] = $student_detail['StudentExamStatus'][0];
		$temporary_degree['student_detail']['GraduationStatuse'] = ClassRegistry::init('GraduationStatus')->getStudentGraduationStatus($student_id);
		$graduate_date = date('d F, Y', 
				mktime(0, 0, 0, 
					substr($temporary_degree['student_detail']['GraduateList']['graduate_date'],5 ,2), 
					substr($temporary_degree['student_detail']['GraduateList']['graduate_date'],8 ,2), 
					substr($temporary_degree['student_detail']['GraduateList']['graduate_date'],0 ,4)
				)
			);
		if($temporary_degree['student_detail']['GraduationStatuse']) {
		  
			$temporary_degree['student_detail']['graduated_date'] = $graduate_date ;
          $temporary_degree['student_detail']['graduated_ethiopic_date'] = $this->getEthiopicGraduationDate($graduate_date);
		
		} else {
                 $temporary_degree['student_detail']['graduated_date']=$graduate_date ;
		    $temporary_degree['student_detail']['graduated_ethiopic_date'] = $this->getEthiopicGraduationDate($graduate_date);
		}
		$temporary_degree_mass[]=$temporary_degree;
	    }
	     return $temporary_degree_mass;
	}
      
      function getStudentListGraduated ($admission_year, $program_id,$program_type_id,$department_id,$year_level_id=null,
           $studentNumber=null,$studentName=null,$graduated=1) {
		/***
                1. Get all students in the department who are in  in the graduate list

		***/
		$options['conditions']['Student.program_id'] = $program_id;
		if($program_type_id != 0 && !empty($program_type_id))
			$options['conditions']['Student.program_type_id'] = $program_type_id;
		$options['conditions']['Student.department_id'] = $department_id;
		$options['conditions'][] = 'Student.curriculum_id IS NOT NULL';
		$options['conditions'][] = 'Student.curriculum_id <> 0';
		if($graduated) {
	$options['conditions'][] = 'Student.id  IN (SELECT student_id FROM graduate_lists)';
		}
		$options['contain'] = array();
               if(!empty($admission_year)) {
			$admissionYear=explode('/',$admission_year);
			$options['conditions']['YEAR(Student.admissionyear)'] = $admissionYear[0];
		}

		if(!empty($studentName)) {
				     
			$options['conditions']['Student.name LIKE '] = $studentName.'%';
		}

		if(!empty($studentNumber)) {
			unset($options);             
			$options['conditions']['Student.studentnumber'] =$studentNumber;
		}
		$options['fields'] = array('Student.id','Student.curriculum_id', 'Student.full_name', 'Student.first_name', 'Student.middle_name', 'Student.last_name', 'Student.studentnumber', 'Student.admissionyear', 'Student.gender');
		$options['order'] = array('Student.first_name ASC', 'Student.middle_name ASC', 'Student.last_name ASC');
		
		return $this->Student->find('all', $options);	
        }

	

     function getEthiopicGraduationDate($graduationDate) {
	App::import('Component','EthiopicDateTime');
	$EthiopicDateTime= new EthiopicDateTimeComponent();
         
	$ethiopicDate['e_day'] = $EthiopicDateTime->GetEthiopicDay(date('j'), date('n'), date('Y'));
	
	$ethiopicDate['e_month'] = $EthiopicDateTime->GetEthiopicMonth(date('j'), date('n'), date('Y'));
	 $ethiopicDate['e_year']  = $EthiopicDateTime->GetEthiopicYear(date('j'), date('n'), date('Y'));
	 $ethiopicDate['e_month_name']= $EthiopicDateTime->GetEthiopicMonthName(date('j'), date('n'), date('Y'));
	$g_d = $graduationDate;
        
	$g_d_obj = new DateTime($g_d);
	//debug($date->format('j'));

	$ethiopicDate['e_g_day']= $EthiopicDateTime->GetEthiopicDay($g_d_obj->format('j'),$g_d_obj->format('n'), $g_d_obj->format('Y'));
	$ethiopicDate['e_g_month'] = $EthiopicDateTime->GetEthiopicMonth($g_d_obj->format('j'),$g_d_obj->format('n'), $g_d_obj->format('Y'));
	$ethiopicDate['e_g_year']= $EthiopicDateTime->GetEthiopicYear($g_d_obj->format('j'),$g_d_obj->format('n'), $g_d_obj->format('Y'));
	$ethiopicDate['e_g_month_name']=$EthiopicDateTime->GetEthiopicMonthName($g_d_obj->format('j'),$g_d_obj->format('n'), $g_d_obj->format('Y'));
	return 	$ethiopicDate;
	
    }

    function isGraduated($studentId) {
    	 $result= $this->find('count',
			array(
				'conditions' =>
				array(
					'GraduateList.student_id' => $studentId
				),
			)
		);
    	 if($result){
    	 	return true;
    	 }
    	 return false;
    }

}
?>
